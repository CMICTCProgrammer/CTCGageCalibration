'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="TC_Report")>  _
Partial Public Class LINQ2SQLDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblGageCalLog(instance As tblGageCalLog)
    End Sub
  Partial Private Sub UpdatetblGageCalLog(instance As tblGageCalLog)
    End Sub
  Partial Private Sub DeletetblGageCalLog(instance As tblGageCalLog)
    End Sub
  Partial Private Sub InserttblGageCalRejctAction(instance As tblGageCalRejctAction)
    End Sub
  Partial Private Sub UpdatetblGageCalRejctAction(instance As tblGageCalRejctAction)
    End Sub
  Partial Private Sub DeletetblGageCalRejctAction(instance As tblGageCalRejctAction)
    End Sub
  Partial Private Sub InserttblEntity(instance As tblEntity)
    End Sub
  Partial Private Sub UpdatetblEntity(instance As tblEntity)
    End Sub
  Partial Private Sub DeletetblEntity(instance As tblEntity)
    End Sub
  Partial Private Sub InserttblUser(instance As tblUser)
    End Sub
  Partial Private Sub UpdatetblUser(instance As tblUser)
    End Sub
  Partial Private Sub DeletetblUser(instance As tblUser)
    End Sub
  Partial Private Sub InsertGageMetric(instance As GageMetric)
    End Sub
  Partial Private Sub UpdateGageMetric(instance As GageMetric)
    End Sub
  Partial Private Sub DeleteGageMetric(instance As GageMetric)
    End Sub
  Partial Private Sub InserttblSetting(instance As tblSetting)
    End Sub
  Partial Private Sub UpdatetblSetting(instance As tblSetting)
    End Sub
  Partial Private Sub DeletetblSetting(instance As tblSetting)
    End Sub
  Partial Private Sub InsertTblGageGroup(instance As TblGageGroup)
    End Sub
  Partial Private Sub UpdateTblGageGroup(instance As TblGageGroup)
    End Sub
  Partial Private Sub DeleteTblGageGroup(instance As TblGageGroup)
    End Sub
  Partial Private Sub InserttblGageCalMaster(instance As tblGageCalMaster)
    End Sub
  Partial Private Sub UpdatetblGageCalMaster(instance As tblGageCalMaster)
    End Sub
  Partial Private Sub DeletetblGageCalMaster(instance As tblGageCalMaster)
    End Sub
  Partial Private Sub InserttblCBOList(instance As tblCBOList)
    End Sub
  Partial Private Sub UpdatetblCBOList(instance As tblCBOList)
    End Sub
  Partial Private Sub DeletetblCBOList(instance As tblCBOList)
    End Sub
  Partial Private Sub InsertTblGageValdCrit(instance As TblGageValdCrit)
    End Sub
  Partial Private Sub UpdateTblGageValdCrit(instance As TblGageValdCrit)
    End Sub
  Partial Private Sub DeleteTblGageValdCrit(instance As TblGageValdCrit)
    End Sub
  Partial Private Sub InsertTblGageValdEvntRslt(instance As TblGageValdEvntRslt)
    End Sub
  Partial Private Sub UpdateTblGageValdEvntRslt(instance As TblGageValdEvntRslt)
    End Sub
  Partial Private Sub DeleteTblGageValdEvntRslt(instance As TblGageValdEvntRslt)
    End Sub
  Partial Private Sub InsertTblGageValdXColHdr(instance As TblGageValdXColHdr)
    End Sub
  Partial Private Sub UpdateTblGageValdXColHdr(instance As TblGageValdXColHdr)
    End Sub
  Partial Private Sub DeleteTblGageValdXColHdr(instance As TblGageValdXColHdr)
    End Sub
  Partial Private Sub InsertTblGageValdXColData(instance As TblGageValdXColData)
    End Sub
  Partial Private Sub UpdateTblGageValdXColData(instance As TblGageValdXColData)
    End Sub
  Partial Private Sub DeleteTblGageValdXColData(instance As TblGageValdXColData)
    End Sub
  Partial Private Sub InsertTblGageValdGagesUsed(instance As TblGageValdGagesUsed)
    End Sub
  Partial Private Sub UpdateTblGageValdGagesUsed(instance As TblGageValdGagesUsed)
    End Sub
  Partial Private Sub DeleteTblGageValdGagesUsed(instance As TblGageValdGagesUsed)
    End Sub
  Partial Private Sub InsertTblGageValdEvnt(instance As TblGageValdEvnt)
    End Sub
  Partial Private Sub UpdateTblGageValdEvnt(instance As TblGageValdEvnt)
    End Sub
  Partial Private Sub DeleteTblGageValdEvnt(instance As TblGageValdEvnt)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CTCGageCalibration.My.MySettings.Default.TestCenterDataSet, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblGageCalLogs() As System.Data.Linq.Table(Of tblGageCalLog)
		Get
			Return Me.GetTable(Of tblGageCalLog)
		End Get
	End Property
	
	Public ReadOnly Property tblGageCalRejctActions() As System.Data.Linq.Table(Of tblGageCalRejctAction)
		Get
			Return Me.GetTable(Of tblGageCalRejctAction)
		End Get
	End Property
	
	Public ReadOnly Property tblEntities() As System.Data.Linq.Table(Of tblEntity)
		Get
			Return Me.GetTable(Of tblEntity)
		End Get
	End Property
	
	Public ReadOnly Property tblUsers() As System.Data.Linq.Table(Of tblUser)
		Get
			Return Me.GetTable(Of tblUser)
		End Get
	End Property
	
	Public ReadOnly Property v_GageCalsByReqTestDates() As System.Data.Linq.Table(Of v_GageCalsByReqTestDate)
		Get
			Return Me.GetTable(Of v_GageCalsByReqTestDate)
		End Get
	End Property
	
	Public ReadOnly Property v_GageCalLogs() As System.Data.Linq.Table(Of v_GageCalLog)
		Get
			Return Me.GetTable(Of v_GageCalLog)
		End Get
	End Property
	
	Public ReadOnly Property v_GageCalMasters() As System.Data.Linq.Table(Of v_GageCalMaster)
		Get
			Return Me.GetTable(Of v_GageCalMaster)
		End Get
	End Property
	
	Public ReadOnly Property GageMetrics() As System.Data.Linq.Table(Of GageMetric)
		Get
			Return Me.GetTable(Of GageMetric)
		End Get
	End Property
	
	Public ReadOnly Property tblSettings() As System.Data.Linq.Table(Of tblSetting)
		Get
			Return Me.GetTable(Of tblSetting)
		End Get
	End Property
	
	Public ReadOnly Property TblGageGroups() As System.Data.Linq.Table(Of TblGageGroup)
		Get
			Return Me.GetTable(Of TblGageGroup)
		End Get
	End Property
	
	Public ReadOnly Property tblGageCalMasters() As System.Data.Linq.Table(Of tblGageCalMaster)
		Get
			Return Me.GetTable(Of tblGageCalMaster)
		End Get
	End Property
	
	Public ReadOnly Property tblCBOLists() As System.Data.Linq.Table(Of tblCBOList)
		Get
			Return Me.GetTable(Of tblCBOList)
		End Get
	End Property
	
	Public ReadOnly Property TblGageValdCrits() As System.Data.Linq.Table(Of TblGageValdCrit)
		Get
			Return Me.GetTable(Of TblGageValdCrit)
		End Get
	End Property
	
	Public ReadOnly Property TblGageValdEvntRslts() As System.Data.Linq.Table(Of TblGageValdEvntRslt)
		Get
			Return Me.GetTable(Of TblGageValdEvntRslt)
		End Get
	End Property
	
	Public ReadOnly Property TblGageValdXColHdrs() As System.Data.Linq.Table(Of TblGageValdXColHdr)
		Get
			Return Me.GetTable(Of TblGageValdXColHdr)
		End Get
	End Property
	
	Public ReadOnly Property TblGageValdXColDatas() As System.Data.Linq.Table(Of TblGageValdXColData)
		Get
			Return Me.GetTable(Of TblGageValdXColData)
		End Get
	End Property
	
	Public ReadOnly Property TblGageValdGagesUseds() As System.Data.Linq.Table(Of TblGageValdGagesUsed)
		Get
			Return Me.GetTable(Of TblGageValdGagesUsed)
		End Get
	End Property
	
	Public ReadOnly Property TblGageValdEvnts() As System.Data.Linq.Table(Of TblGageValdEvnt)
		Get
			Return Me.GetTable(Of TblGageValdEvnt)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblGageCalLog")>  _
Partial Public Class tblGageCalLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CalLogID As Integer
	
	Private _GageID As String
	
	Private _PerformedBy As String
	
	Private _CalDate As Date
	
	Private _CalNotes As String
	
	Private _PassFail As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCalLogIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCalLogIDChanged()
    End Sub
    Partial Private Sub OnGageIDChanging(value As String)
    End Sub
    Partial Private Sub OnGageIDChanged()
    End Sub
    Partial Private Sub OnPerformedByChanging(value As String)
    End Sub
    Partial Private Sub OnPerformedByChanged()
    End Sub
    Partial Private Sub OnCalDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCalDateChanged()
    End Sub
    Partial Private Sub OnCalNotesChanging(value As String)
    End Sub
    Partial Private Sub OnCalNotesChanged()
    End Sub
    Partial Private Sub OnPassFailChanging(value As String)
    End Sub
    Partial Private Sub OnPassFailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalLogID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CalLogID() As Integer
		Get
			Return Me._CalLogID
		End Get
		Set
			If ((Me._CalLogID = value)  _
						= false) Then
				Me.OnCalLogIDChanging(value)
				Me.SendPropertyChanging
				Me._CalLogID = value
				Me.SendPropertyChanged("CalLogID")
				Me.OnCalLogIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me.OnGageIDChanging(value)
				Me.SendPropertyChanging
				Me._GageID = value
				Me.SendPropertyChanged("GageID")
				Me.OnGageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerformedBy", DbType:="VarChar(100)")>  _
	Public Property PerformedBy() As String
		Get
			Return Me._PerformedBy
		End Get
		Set
			If (String.Equals(Me._PerformedBy, value) = false) Then
				Me.OnPerformedByChanging(value)
				Me.SendPropertyChanging
				Me._PerformedBy = value
				Me.SendPropertyChanged("PerformedBy")
				Me.OnPerformedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalDate", DbType:="Date NOT NULL")>  _
	Public Property CalDate() As Date
		Get
			Return Me._CalDate
		End Get
		Set
			If ((Me._CalDate = value)  _
						= false) Then
				Me.OnCalDateChanging(value)
				Me.SendPropertyChanging
				Me._CalDate = value
				Me.SendPropertyChanged("CalDate")
				Me.OnCalDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalNotes", DbType:="VarChar(255)")>  _
	Public Property CalNotes() As String
		Get
			Return Me._CalNotes
		End Get
		Set
			If (String.Equals(Me._CalNotes, value) = false) Then
				Me.OnCalNotesChanging(value)
				Me.SendPropertyChanging
				Me._CalNotes = value
				Me.SendPropertyChanged("CalNotes")
				Me.OnCalNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassFail", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property PassFail() As String
		Get
			Return Me._PassFail
		End Get
		Set
			If (String.Equals(Me._PassFail, value) = false) Then
				Me.OnPassFailChanging(value)
				Me.SendPropertyChanging
				Me._PassFail = value
				Me.SendPropertyChanged("PassFail")
				Me.OnPassFailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblGageCalRejctAction")>  _
Partial Public Class tblGageCalRejctAction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RjctActID As Integer
	
	Private _CalLogID As Integer
	
	Private _PrevCalDate As System.Nullable(Of Date)
	
	Private _UsageLocation As String
	
	Private _UsageDescription As String
	
	Private _ActionDescription As String
	
	Private _GageDisposition As String
	
	Private _EffectiveActionDate As System.Nullable(Of Date)
	
	Private _ReviewedApproved As System.Nullable(Of Boolean)
	
	Private _ReviewedApprovedBy As System.Nullable(Of Integer)
	
	Private _SubmittedBy As System.Nullable(Of Integer)
	
	Private _ReqsWhereUsed As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRjctActIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRjctActIDChanged()
    End Sub
    Partial Private Sub OnCalLogIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCalLogIDChanged()
    End Sub
    Partial Private Sub OnPrevCalDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPrevCalDateChanged()
    End Sub
    Partial Private Sub OnUsageLocationChanging(value As String)
    End Sub
    Partial Private Sub OnUsageLocationChanged()
    End Sub
    Partial Private Sub OnUsageDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnUsageDescriptionChanged()
    End Sub
    Partial Private Sub OnActionDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnActionDescriptionChanged()
    End Sub
    Partial Private Sub OnGageDispositionChanging(value As String)
    End Sub
    Partial Private Sub OnGageDispositionChanged()
    End Sub
    Partial Private Sub OnEffectiveActionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEffectiveActionDateChanged()
    End Sub
    Partial Private Sub OnReviewedApprovedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnReviewedApprovedChanged()
    End Sub
    Partial Private Sub OnReviewedApprovedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReviewedApprovedByChanged()
    End Sub
    Partial Private Sub OnSubmittedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubmittedByChanged()
    End Sub
    Partial Private Sub OnReqsWhereUsedChanging(value As String)
    End Sub
    Partial Private Sub OnReqsWhereUsedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RjctActID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RjctActID() As Integer
		Get
			Return Me._RjctActID
		End Get
		Set
			If ((Me._RjctActID = value)  _
						= false) Then
				Me.OnRjctActIDChanging(value)
				Me.SendPropertyChanging
				Me._RjctActID = value
				Me.SendPropertyChanged("RjctActID")
				Me.OnRjctActIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalLogID", DbType:="Int NOT NULL")>  _
	Public Property CalLogID() As Integer
		Get
			Return Me._CalLogID
		End Get
		Set
			If ((Me._CalLogID = value)  _
						= false) Then
				Me.OnCalLogIDChanging(value)
				Me.SendPropertyChanging
				Me._CalLogID = value
				Me.SendPropertyChanged("CalLogID")
				Me.OnCalLogIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrevCalDate", DbType:="Date")>  _
	Public Property PrevCalDate() As System.Nullable(Of Date)
		Get
			Return Me._PrevCalDate
		End Get
		Set
			If (Me._PrevCalDate.Equals(value) = false) Then
				Me.OnPrevCalDateChanging(value)
				Me.SendPropertyChanging
				Me._PrevCalDate = value
				Me.SendPropertyChanged("PrevCalDate")
				Me.OnPrevCalDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsageLocation", DbType:="VarChar(60)")>  _
	Public Property UsageLocation() As String
		Get
			Return Me._UsageLocation
		End Get
		Set
			If (String.Equals(Me._UsageLocation, value) = false) Then
				Me.OnUsageLocationChanging(value)
				Me.SendPropertyChanging
				Me._UsageLocation = value
				Me.SendPropertyChanged("UsageLocation")
				Me.OnUsageLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UsageDescription", DbType:="VarChar(60)")>  _
	Public Property UsageDescription() As String
		Get
			Return Me._UsageDescription
		End Get
		Set
			If (String.Equals(Me._UsageDescription, value) = false) Then
				Me.OnUsageDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._UsageDescription = value
				Me.SendPropertyChanged("UsageDescription")
				Me.OnUsageDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionDescription", DbType:="VarChar(MAX)")>  _
	Public Property ActionDescription() As String
		Get
			Return Me._ActionDescription
		End Get
		Set
			If (String.Equals(Me._ActionDescription, value) = false) Then
				Me.OnActionDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ActionDescription = value
				Me.SendPropertyChanged("ActionDescription")
				Me.OnActionDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageDisposition", DbType:="VarChar(100)")>  _
	Public Property GageDisposition() As String
		Get
			Return Me._GageDisposition
		End Get
		Set
			If (String.Equals(Me._GageDisposition, value) = false) Then
				Me.OnGageDispositionChanging(value)
				Me.SendPropertyChanging
				Me._GageDisposition = value
				Me.SendPropertyChanged("GageDisposition")
				Me.OnGageDispositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EffectiveActionDate", DbType:="Date")>  _
	Public Property EffectiveActionDate() As System.Nullable(Of Date)
		Get
			Return Me._EffectiveActionDate
		End Get
		Set
			If (Me._EffectiveActionDate.Equals(value) = false) Then
				Me.OnEffectiveActionDateChanging(value)
				Me.SendPropertyChanging
				Me._EffectiveActionDate = value
				Me.SendPropertyChanged("EffectiveActionDate")
				Me.OnEffectiveActionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReviewedApproved", DbType:="Bit")>  _
	Public Property ReviewedApproved() As System.Nullable(Of Boolean)
		Get
			Return Me._ReviewedApproved
		End Get
		Set
			If (Me._ReviewedApproved.Equals(value) = false) Then
				Me.OnReviewedApprovedChanging(value)
				Me.SendPropertyChanging
				Me._ReviewedApproved = value
				Me.SendPropertyChanged("ReviewedApproved")
				Me.OnReviewedApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReviewedApprovedBy", DbType:="Int")>  _
	Public Property ReviewedApprovedBy() As System.Nullable(Of Integer)
		Get
			Return Me._ReviewedApprovedBy
		End Get
		Set
			If (Me._ReviewedApprovedBy.Equals(value) = false) Then
				Me.OnReviewedApprovedByChanging(value)
				Me.SendPropertyChanging
				Me._ReviewedApprovedBy = value
				Me.SendPropertyChanged("ReviewedApprovedBy")
				Me.OnReviewedApprovedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmittedBy", DbType:="Int")>  _
	Public Property SubmittedBy() As System.Nullable(Of Integer)
		Get
			Return Me._SubmittedBy
		End Get
		Set
			If (Me._SubmittedBy.Equals(value) = false) Then
				Me.OnSubmittedByChanging(value)
				Me.SendPropertyChanging
				Me._SubmittedBy = value
				Me.SendPropertyChanged("SubmittedBy")
				Me.OnSubmittedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReqsWhereUsed", DbType:="VarChar(MAX)")>  _
	Public Property ReqsWhereUsed() As String
		Get
			Return Me._ReqsWhereUsed
		End Get
		Set
			If (String.Equals(Me._ReqsWhereUsed, value) = false) Then
				Me.OnReqsWhereUsedChanging(value)
				Me.SendPropertyChanging
				Me._ReqsWhereUsed = value
				Me.SendPropertyChanged("ReqsWhereUsed")
				Me.OnReqsWhereUsedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblEntities")>  _
Partial Public Class tblEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EntityID As Integer
	
	Private _EntityType As String
	
	Private _EntityName As String
	
	Private _EntityNotes As String
	
	Private _EntityActive As Boolean
	
	Private _EntitySortOrder As System.Nullable(Of Integer)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _EntityGroupID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEntityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEntityIDChanged()
    End Sub
    Partial Private Sub OnEntityTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEntityTypeChanged()
    End Sub
    Partial Private Sub OnEntityNameChanging(value As String)
    End Sub
    Partial Private Sub OnEntityNameChanged()
    End Sub
    Partial Private Sub OnEntityNotesChanging(value As String)
    End Sub
    Partial Private Sub OnEntityNotesChanged()
    End Sub
    Partial Private Sub OnEntityActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEntityActiveChanged()
    End Sub
    Partial Private Sub OnEntitySortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEntitySortOrderChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnEntityGroupIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEntityGroupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EntityID() As Integer
		Get
			Return Me._EntityID
		End Get
		Set
			If ((Me._EntityID = value)  _
						= false) Then
				Me.OnEntityIDChanging(value)
				Me.SendPropertyChanging
				Me._EntityID = value
				Me.SendPropertyChanged("EntityID")
				Me.OnEntityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EntityType() As String
		Get
			Return Me._EntityType
		End Get
		Set
			If (String.Equals(Me._EntityType, value) = false) Then
				Me.OnEntityTypeChanging(value)
				Me.SendPropertyChanging
				Me._EntityType = value
				Me.SendPropertyChanged("EntityType")
				Me.OnEntityTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EntityName() As String
		Get
			Return Me._EntityName
		End Get
		Set
			If (String.Equals(Me._EntityName, value) = false) Then
				Me.OnEntityNameChanging(value)
				Me.SendPropertyChanging
				Me._EntityName = value
				Me.SendPropertyChanged("EntityName")
				Me.OnEntityNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityNotes", DbType:="NVarChar(MAX)")>  _
	Public Property EntityNotes() As String
		Get
			Return Me._EntityNotes
		End Get
		Set
			If (String.Equals(Me._EntityNotes, value) = false) Then
				Me.OnEntityNotesChanging(value)
				Me.SendPropertyChanging
				Me._EntityNotes = value
				Me.SendPropertyChanged("EntityNotes")
				Me.OnEntityNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityActive", DbType:="Bit NOT NULL")>  _
	Public Property EntityActive() As Boolean
		Get
			Return Me._EntityActive
		End Get
		Set
			If ((Me._EntityActive = value)  _
						= false) Then
				Me.OnEntityActiveChanging(value)
				Me.SendPropertyChanging
				Me._EntityActive = value
				Me.SendPropertyChanged("EntityActive")
				Me.OnEntityActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntitySortOrder", DbType:="Int")>  _
	Public Property EntitySortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._EntitySortOrder
		End Get
		Set
			If (Me._EntitySortOrder.Equals(value) = false) Then
				Me.OnEntitySortOrderChanging(value)
				Me.SendPropertyChanging
				Me._EntitySortOrder = value
				Me.SendPropertyChanged("EntitySortOrder")
				Me.OnEntitySortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityGroupID", DbType:="Int")>  _
	Public Property EntityGroupID() As System.Nullable(Of Integer)
		Get
			Return Me._EntityGroupID
		End Get
		Set
			If (Me._EntityGroupID.Equals(value) = false) Then
				Me.OnEntityGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._EntityGroupID = value
				Me.SendPropertyChanged("EntityGroupID")
				Me.OnEntityGroupIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUsers")>  _
Partial Public Class tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _email As String
	
	Private _Requestor As System.Nullable(Of Boolean)
	
	Private _TestTech As System.Nullable(Of Boolean)
	
	Private _Admin As System.Nullable(Of Boolean)
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _LastUpdated As System.Nullable(Of Date)
	
	Private _UpdatedBy As System.Nullable(Of Integer)
	
	Private _SortOrder As System.Nullable(Of Integer)
	
	Private _TaskAdmin As System.Nullable(Of Boolean)
	
	Private _FirstNameAlias As String
	
	Private _LastInstallDate As System.Nullable(Of Date)
	
	Private _LastInstallVer As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnRequestorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequestorChanged()
    End Sub
    Partial Private Sub OnTestTechChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTestTechChanged()
    End Sub
    Partial Private Sub OnAdminChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAdminChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnTaskAdminChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTaskAdminChanged()
    End Sub
    Partial Private Sub OnFirstNameAliasChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameAliasChanged()
    End Sub
    Partial Private Sub OnLastInstallDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastInstallDateChanged()
    End Sub
    Partial Private Sub OnLastInstallVerChanging(value As String)
    End Sub
    Partial Private Sub OnLastInstallVerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(40)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(40)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(40)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(40)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requestor", DbType:="Bit")>  _
	Public Property Requestor() As System.Nullable(Of Boolean)
		Get
			Return Me._Requestor
		End Get
		Set
			If (Me._Requestor.Equals(value) = false) Then
				Me.OnRequestorChanging(value)
				Me.SendPropertyChanging
				Me._Requestor = value
				Me.SendPropertyChanged("Requestor")
				Me.OnRequestorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestTech", DbType:="Bit")>  _
	Public Property TestTech() As System.Nullable(Of Boolean)
		Get
			Return Me._TestTech
		End Get
		Set
			If (Me._TestTech.Equals(value) = false) Then
				Me.OnTestTechChanging(value)
				Me.SendPropertyChanging
				Me._TestTech = value
				Me.SendPropertyChanged("TestTech")
				Me.OnTestTechChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Admin", DbType:="Bit")>  _
	Public Property Admin() As System.Nullable(Of Boolean)
		Get
			Return Me._Admin
		End Get
		Set
			If (Me._Admin.Equals(value) = false) Then
				Me.OnAdminChanging(value)
				Me.SendPropertyChanging
				Me._Admin = value
				Me.SendPropertyChanged("Admin")
				Me.OnAdminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdated", DbType:="DateTime")>  _
	Public Property LastUpdated() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdated
		End Get
		Set
			If (Me._LastUpdated.Equals(value) = false) Then
				Me.OnLastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdated = value
				Me.SendPropertyChanged("LastUpdated")
				Me.OnLastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="Int")>  _
	Public Property UpdatedBy() As System.Nullable(Of Integer)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
	Public Property SortOrder() As System.Nullable(Of Integer)
		Get
			Return Me._SortOrder
		End Get
		Set
			If (Me._SortOrder.Equals(value) = false) Then
				Me.OnSortOrderChanging(value)
				Me.SendPropertyChanging
				Me._SortOrder = value
				Me.SendPropertyChanged("SortOrder")
				Me.OnSortOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaskAdmin", DbType:="Bit")>  _
	Public Property TaskAdmin() As System.Nullable(Of Boolean)
		Get
			Return Me._TaskAdmin
		End Get
		Set
			If (Me._TaskAdmin.Equals(value) = false) Then
				Me.OnTaskAdminChanging(value)
				Me.SendPropertyChanging
				Me._TaskAdmin = value
				Me.SendPropertyChanged("TaskAdmin")
				Me.OnTaskAdminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstNameAlias", DbType:="VarChar(40)")>  _
	Public Property FirstNameAlias() As String
		Get
			Return Me._FirstNameAlias
		End Get
		Set
			If (String.Equals(Me._FirstNameAlias, value) = false) Then
				Me.OnFirstNameAliasChanging(value)
				Me.SendPropertyChanging
				Me._FirstNameAlias = value
				Me.SendPropertyChanged("FirstNameAlias")
				Me.OnFirstNameAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastInstallDate", DbType:="DateTime")>  _
	Public Property LastInstallDate() As System.Nullable(Of Date)
		Get
			Return Me._LastInstallDate
		End Get
		Set
			If (Me._LastInstallDate.Equals(value) = false) Then
				Me.OnLastInstallDateChanging(value)
				Me.SendPropertyChanging
				Me._LastInstallDate = value
				Me.SendPropertyChanged("LastInstallDate")
				Me.OnLastInstallDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastInstallVer", DbType:="VarChar(25)")>  _
	Public Property LastInstallVer() As String
		Get
			Return Me._LastInstallVer
		End Get
		Set
			If (String.Equals(Me._LastInstallVer, value) = false) Then
				Me.OnLastInstallVerChanging(value)
				Me.SendPropertyChanging
				Me._LastInstallVer = value
				Me.SendPropertyChanged("LastInstallVer")
				Me.OnLastInstallVerChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_GageCalsByReqTestDates")>  _
Partial Public Class v_GageCalsByReqTestDate
	
	Private _GageID As String
	
	Private _Description As String
	
	Private _ID As String
	
	Private _Cal_Cycle As String
	
	Private _CalDateStart As System.Nullable(Of Date)
	
	Private _CalDateEnd As Date
	
	Private _TestStart As System.Nullable(Of Date)
	
	Private _TestEnd As System.Nullable(Of Date)
	
	Private _PassFail As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me._GageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(60)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_Cycle", DbType:="VarChar(20)")>  _
	Public Property Cal_Cycle() As String
		Get
			Return Me._Cal_Cycle
		End Get
		Set
			If (String.Equals(Me._Cal_Cycle, value) = false) Then
				Me._Cal_Cycle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalDateStart", DbType:="Date")>  _
	Public Property CalDateStart() As System.Nullable(Of Date)
		Get
			Return Me._CalDateStart
		End Get
		Set
			If (Me._CalDateStart.Equals(value) = false) Then
				Me._CalDateStart = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalDateEnd", DbType:="Date NOT NULL")>  _
	Public Property CalDateEnd() As Date
		Get
			Return Me._CalDateEnd
		End Get
		Set
			If ((Me._CalDateEnd = value)  _
						= false) Then
				Me._CalDateEnd = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestStart", DbType:="SmallDateTime")>  _
	Public Property TestStart() As System.Nullable(Of Date)
		Get
			Return Me._TestStart
		End Get
		Set
			If (Me._TestStart.Equals(value) = false) Then
				Me._TestStart = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestEnd", DbType:="SmallDateTime")>  _
	Public Property TestEnd() As System.Nullable(Of Date)
		Get
			Return Me._TestEnd
		End Get
		Set
			If (Me._TestEnd.Equals(value) = false) Then
				Me._TestEnd = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassFail", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property PassFail() As String
		Get
			Return Me._PassFail
		End Get
		Set
			If (String.Equals(Me._PassFail, value) = false) Then
				Me._PassFail = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_GageCalLog")>  _
Partial Public Class v_GageCalLog
	
	Private _CalLogID As Integer
	
	Private _GageID As String
	
	Private _Description As String
	
	Private _PerformedBy As String
	
	Private _CalDate As Date
	
	Private _CalNotes As String
	
	Private _PassFail As String
	
	Private _GageType As String
	
	Private _NextDue As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalLogID", DbType:="Int NOT NULL")>  _
	Public Property CalLogID() As Integer
		Get
			Return Me._CalLogID
		End Get
		Set
			If ((Me._CalLogID = value)  _
						= false) Then
				Me._CalLogID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me._GageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(60)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerformedBy", DbType:="VarChar(100)")>  _
	Public Property PerformedBy() As String
		Get
			Return Me._PerformedBy
		End Get
		Set
			If (String.Equals(Me._PerformedBy, value) = false) Then
				Me._PerformedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalDate", DbType:="Date NOT NULL")>  _
	Public Property CalDate() As Date
		Get
			Return Me._CalDate
		End Get
		Set
			If ((Me._CalDate = value)  _
						= false) Then
				Me._CalDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalNotes", DbType:="VarChar(255)")>  _
	Public Property CalNotes() As String
		Get
			Return Me._CalNotes
		End Get
		Set
			If (String.Equals(Me._CalNotes, value) = false) Then
				Me._CalNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassFail", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property PassFail() As String
		Get
			Return Me._PassFail
		End Get
		Set
			If (String.Equals(Me._PassFail, value) = false) Then
				Me._PassFail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageType", DbType:="VarChar(20)")>  _
	Public Property GageType() As String
		Get
			Return Me._GageType
		End Get
		Set
			If (String.Equals(Me._GageType, value) = false) Then
				Me._GageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NextDue", DbType:="Date")>  _
	Public Property NextDue() As System.Nullable(Of Date)
		Get
			Return Me._NextDue
		End Get
		Set
			If (Me._NextDue.Equals(value) = false) Then
				Me._NextDue = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.v_GageCalMaster")>  _
Partial Public Class v_GageCalMaster
	
	Private _GageID As String
	
	Private _Description As String
	
	Private _Manufacturer As String
	
	Private _Model_Serial As String
	
	Private _Details_Size As String
	
	Private _Accuracy As String
	
	Private _Location_Assignee As String
	
	Private _Status As String
	
	Private _Cal_Cycle As String
	
	Private _Cal_Instructions As String
	
	Private _GageNotes As String
	
	Private _DateDue As System.Nullable(Of Date)
	
	Private _LastCal As System.Nullable(Of Date)
	
	Private _GageType As String
	
	Private _IsDue As Integer
	
	Private _Today As Date
	
	Private _OvrDue As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me._GageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(60)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturer", DbType:="VarChar(60)")>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me._Manufacturer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model_Serial", DbType:="VarChar(60)")>  _
	Public Property Model_Serial() As String
		Get
			Return Me._Model_Serial
		End Get
		Set
			If (String.Equals(Me._Model_Serial, value) = false) Then
				Me._Model_Serial = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details_Size", DbType:="VarChar(60)")>  _
	Public Property Details_Size() As String
		Get
			Return Me._Details_Size
		End Get
		Set
			If (String.Equals(Me._Details_Size, value) = false) Then
				Me._Details_Size = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accuracy", DbType:="VarChar(60)")>  _
	Public Property Accuracy() As String
		Get
			Return Me._Accuracy
		End Get
		Set
			If (String.Equals(Me._Accuracy, value) = false) Then
				Me._Accuracy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location_Assignee", DbType:="VarChar(60)")>  _
	Public Property Location_Assignee() As String
		Get
			Return Me._Location_Assignee
		End Get
		Set
			If (String.Equals(Me._Location_Assignee, value) = false) Then
				Me._Location_Assignee = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(60)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_Cycle", DbType:="VarChar(20)")>  _
	Public Property Cal_Cycle() As String
		Get
			Return Me._Cal_Cycle
		End Get
		Set
			If (String.Equals(Me._Cal_Cycle, value) = false) Then
				Me._Cal_Cycle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_Instructions", DbType:="VarChar(MAX)")>  _
	Public Property Cal_Instructions() As String
		Get
			Return Me._Cal_Instructions
		End Get
		Set
			If (String.Equals(Me._Cal_Instructions, value) = false) Then
				Me._Cal_Instructions = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageNotes", DbType:="VarChar(MAX)")>  _
	Public Property GageNotes() As String
		Get
			Return Me._GageNotes
		End Get
		Set
			If (String.Equals(Me._GageNotes, value) = false) Then
				Me._GageNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateDue", DbType:="Date")>  _
	Public Property DateDue() As System.Nullable(Of Date)
		Get
			Return Me._DateDue
		End Get
		Set
			If (Me._DateDue.Equals(value) = false) Then
				Me._DateDue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastCal", DbType:="Date")>  _
	Public Property LastCal() As System.Nullable(Of Date)
		Get
			Return Me._LastCal
		End Get
		Set
			If (Me._LastCal.Equals(value) = false) Then
				Me._LastCal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageType", DbType:="VarChar(20)")>  _
	Public Property GageType() As String
		Get
			Return Me._GageType
		End Get
		Set
			If (String.Equals(Me._GageType, value) = false) Then
				Me._GageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDue", DbType:="Int NOT NULL")>  _
	Public Property IsDue() As Integer
		Get
			Return Me._IsDue
		End Get
		Set
			If ((Me._IsDue = value)  _
						= false) Then
				Me._IsDue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Today", DbType:="DateTime NOT NULL")>  _
	Public Property Today() As Date
		Get
			Return Me._Today
		End Get
		Set
			If ((Me._Today = value)  _
						= false) Then
				Me._Today = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OvrDue", DbType:="Int NOT NULL")>  _
	Public Property OvrDue() As Integer
		Get
			Return Me._OvrDue
		End Get
		Set
			If ((Me._OvrDue = value)  _
						= false) Then
				Me._OvrDue = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GageMetrics")>  _
Partial Public Class GageMetric
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _date As Date
	
	Private _Gages_Due As System.Nullable(Of Integer)
	
	Private _Gages_Overdue As System.Nullable(Of Integer)
	
	Private _Gages_In_Service As System.Nullable(Of Integer)
	
	Private _Gages_Ref_Only As System.Nullable(Of Integer)
	
	Private _Gages_Out_Service As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnGages_DueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGages_DueChanged()
    End Sub
    Partial Private Sub OnGages_OverdueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGages_OverdueChanged()
    End Sub
    Partial Private Sub OnGages_In_ServiceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGages_In_ServiceChanged()
    End Sub
    Partial Private Sub OnGages_Ref_OnlyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGages_Ref_OnlyChanged()
    End Sub
    Partial Private Sub OnGages_Out_ServiceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGages_Out_ServiceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gages_Due", DbType:="Int")>  _
	Public Property Gages_Due() As System.Nullable(Of Integer)
		Get
			Return Me._Gages_Due
		End Get
		Set
			If (Me._Gages_Due.Equals(value) = false) Then
				Me.OnGages_DueChanging(value)
				Me.SendPropertyChanging
				Me._Gages_Due = value
				Me.SendPropertyChanged("Gages_Due")
				Me.OnGages_DueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gages_Overdue", DbType:="Int")>  _
	Public Property Gages_Overdue() As System.Nullable(Of Integer)
		Get
			Return Me._Gages_Overdue
		End Get
		Set
			If (Me._Gages_Overdue.Equals(value) = false) Then
				Me.OnGages_OverdueChanging(value)
				Me.SendPropertyChanging
				Me._Gages_Overdue = value
				Me.SendPropertyChanged("Gages_Overdue")
				Me.OnGages_OverdueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gages_In_Service", DbType:="Int")>  _
	Public Property Gages_In_Service() As System.Nullable(Of Integer)
		Get
			Return Me._Gages_In_Service
		End Get
		Set
			If (Me._Gages_In_Service.Equals(value) = false) Then
				Me.OnGages_In_ServiceChanging(value)
				Me.SendPropertyChanging
				Me._Gages_In_Service = value
				Me.SendPropertyChanged("Gages_In_Service")
				Me.OnGages_In_ServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gages_Ref_Only", DbType:="Int")>  _
	Public Property Gages_Ref_Only() As System.Nullable(Of Integer)
		Get
			Return Me._Gages_Ref_Only
		End Get
		Set
			If (Me._Gages_Ref_Only.Equals(value) = false) Then
				Me.OnGages_Ref_OnlyChanging(value)
				Me.SendPropertyChanging
				Me._Gages_Ref_Only = value
				Me.SendPropertyChanged("Gages_Ref_Only")
				Me.OnGages_Ref_OnlyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gages_Out_Service", DbType:="Int")>  _
	Public Property Gages_Out_Service() As System.Nullable(Of Integer)
		Get
			Return Me._Gages_Out_Service
		End Get
		Set
			If (Me._Gages_Out_Service.Equals(value) = false) Then
				Me.OnGages_Out_ServiceChanging(value)
				Me.SendPropertyChanging
				Me._Gages_Out_Service = value
				Me.SendPropertyChanged("Gages_Out_Service")
				Me.OnGages_Out_ServiceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSettings")>  _
Partial Public Class tblSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SettingID As Integer
	
	Private _SettingName As String
	
	Private _SettingValue As String
	
	Private _SettingDescript As String
	
	Private _Encrypted As System.Nullable(Of Boolean)
	
	Private _AppName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnSettingDescriptChanging(value As String)
    End Sub
    Partial Private Sub OnSettingDescriptChanged()
    End Sub
    Partial Private Sub OnEncryptedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEncryptedChanged()
    End Sub
    Partial Private Sub OnAppNameChanging(value As String)
    End Sub
    Partial Private Sub OnAppNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SettingID() As Integer
		Get
			Return Me._SettingID
		End Get
		Set
			If ((Me._SettingID = value)  _
						= false) Then
				Me.OnSettingIDChanging(value)
				Me.SendPropertyChanging
				Me._SettingID = value
				Me.SendPropertyChanged("SettingID")
				Me.OnSettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me.OnSettingValueChanging(value)
				Me.SendPropertyChanging
				Me._SettingValue = value
				Me.SendPropertyChanged("SettingValue")
				Me.OnSettingValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingDescript", DbType:="VarChar(200)")>  _
	Public Property SettingDescript() As String
		Get
			Return Me._SettingDescript
		End Get
		Set
			If (String.Equals(Me._SettingDescript, value) = false) Then
				Me.OnSettingDescriptChanging(value)
				Me.SendPropertyChanging
				Me._SettingDescript = value
				Me.SendPropertyChanged("SettingDescript")
				Me.OnSettingDescriptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Encrypted", DbType:="Bit")>  _
	Public Property Encrypted() As System.Nullable(Of Boolean)
		Get
			Return Me._Encrypted
		End Get
		Set
			If (Me._Encrypted.Equals(value) = false) Then
				Me.OnEncryptedChanging(value)
				Me.SendPropertyChanging
				Me._Encrypted = value
				Me.SendPropertyChanged("Encrypted")
				Me.OnEncryptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppName", DbType:="VarChar(50)")>  _
	Public Property AppName() As String
		Get
			Return Me._AppName
		End Get
		Set
			If (String.Equals(Me._AppName, value) = false) Then
				Me.OnAppNameChanging(value)
				Me.SendPropertyChanging
				Me._AppName = value
				Me.SendPropertyChanged("AppName")
				Me.OnAppNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageGroup")>  _
Partial Public Class TblGageGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GageGroupID As String
	
	Private _GageGroupDesc As String
	
	Private _GageGroupOwner As String
	
	Private _GageGroupActive As System.Nullable(Of Boolean)
	
	Private _GageGroupDefaultLoc As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGageGroupIDChanging(value As String)
    End Sub
    Partial Private Sub OnGageGroupIDChanged()
    End Sub
    Partial Private Sub OnGageGroupDescChanging(value As String)
    End Sub
    Partial Private Sub OnGageGroupDescChanged()
    End Sub
    Partial Private Sub OnGageGroupOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnGageGroupOwnerChanged()
    End Sub
    Partial Private Sub OnGageGroupActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGageGroupActiveChanged()
    End Sub
    Partial Private Sub OnGageGroupDefaultLocChanging(value As String)
    End Sub
    Partial Private Sub OnGageGroupDefaultLocChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageGroupID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property GageGroupID() As String
		Get
			Return Me._GageGroupID
		End Get
		Set
			If (String.Equals(Me._GageGroupID, value) = false) Then
				Me.OnGageGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._GageGroupID = value
				Me.SendPropertyChanged("GageGroupID")
				Me.OnGageGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageGroupDesc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GageGroupDesc() As String
		Get
			Return Me._GageGroupDesc
		End Get
		Set
			If (String.Equals(Me._GageGroupDesc, value) = false) Then
				Me.OnGageGroupDescChanging(value)
				Me.SendPropertyChanging
				Me._GageGroupDesc = value
				Me.SendPropertyChanged("GageGroupDesc")
				Me.OnGageGroupDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageGroupOwner", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GageGroupOwner() As String
		Get
			Return Me._GageGroupOwner
		End Get
		Set
			If (String.Equals(Me._GageGroupOwner, value) = false) Then
				Me.OnGageGroupOwnerChanging(value)
				Me.SendPropertyChanging
				Me._GageGroupOwner = value
				Me.SendPropertyChanged("GageGroupOwner")
				Me.OnGageGroupOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageGroupActive", DbType:="Bit")>  _
	Public Property GageGroupActive() As System.Nullable(Of Boolean)
		Get
			Return Me._GageGroupActive
		End Get
		Set
			If (Me._GageGroupActive.Equals(value) = false) Then
				Me.OnGageGroupActiveChanging(value)
				Me.SendPropertyChanging
				Me._GageGroupActive = value
				Me.SendPropertyChanged("GageGroupActive")
				Me.OnGageGroupActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageGroupDefaultLoc", DbType:="VarChar(50)")>  _
	Public Property GageGroupDefaultLoc() As String
		Get
			Return Me._GageGroupDefaultLoc
		End Get
		Set
			If (String.Equals(Me._GageGroupDefaultLoc, value) = false) Then
				Me.OnGageGroupDefaultLocChanging(value)
				Me.SendPropertyChanging
				Me._GageGroupDefaultLoc = value
				Me.SendPropertyChanged("GageGroupDefaultLoc")
				Me.OnGageGroupDefaultLocChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblGageCalMaster")>  _
Partial Public Class tblGageCalMaster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GageID As String
	
	Private _Description As String
	
	Private _Manufacturer As String
	
	Private _Model_Serial As String
	
	Private _Details_Size As String
	
	Private _Accuracy As String
	
	Private _Location_Assignee As String
	
	Private _Status As String
	
	Private _Cal_Cycle As String
	
	Private _Cal_Instructions As String
	
	Private _GageNotes As String
	
	Private _DateDue As System.Nullable(Of Date)
	
	Private _GageType As String
	
	Private _LocEntityID As System.Nullable(Of Integer)
	
	Private _GageValdID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGageIDChanging(value As String)
    End Sub
    Partial Private Sub OnGageIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnManufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerChanged()
    End Sub
    Partial Private Sub OnModel_SerialChanging(value As String)
    End Sub
    Partial Private Sub OnModel_SerialChanged()
    End Sub
    Partial Private Sub OnDetails_SizeChanging(value As String)
    End Sub
    Partial Private Sub OnDetails_SizeChanged()
    End Sub
    Partial Private Sub OnAccuracyChanging(value As String)
    End Sub
    Partial Private Sub OnAccuracyChanged()
    End Sub
    Partial Private Sub OnLocation_AssigneeChanging(value As String)
    End Sub
    Partial Private Sub OnLocation_AssigneeChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCal_CycleChanging(value As String)
    End Sub
    Partial Private Sub OnCal_CycleChanged()
    End Sub
    Partial Private Sub OnCal_InstructionsChanging(value As String)
    End Sub
    Partial Private Sub OnCal_InstructionsChanged()
    End Sub
    Partial Private Sub OnGageNotesChanging(value As String)
    End Sub
    Partial Private Sub OnGageNotesChanged()
    End Sub
    Partial Private Sub OnDateDueChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateDueChanged()
    End Sub
    Partial Private Sub OnGageTypeChanging(value As String)
    End Sub
    Partial Private Sub OnGageTypeChanged()
    End Sub
    Partial Private Sub OnLocEntityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLocEntityIDChanged()
    End Sub
    Partial Private Sub OnGageValdIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGageValdIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me.OnGageIDChanging(value)
				Me.SendPropertyChanging
				Me._GageID = value
				Me.SendPropertyChanged("GageID")
				Me.OnGageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(60)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Manufacturer", DbType:="VarChar(60)")>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me.OnManufacturerChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturer = value
				Me.SendPropertyChanged("Manufacturer")
				Me.OnManufacturerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model_Serial", DbType:="VarChar(60)")>  _
	Public Property Model_Serial() As String
		Get
			Return Me._Model_Serial
		End Get
		Set
			If (String.Equals(Me._Model_Serial, value) = false) Then
				Me.OnModel_SerialChanging(value)
				Me.SendPropertyChanging
				Me._Model_Serial = value
				Me.SendPropertyChanged("Model_Serial")
				Me.OnModel_SerialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details_Size", DbType:="VarChar(60)")>  _
	Public Property Details_Size() As String
		Get
			Return Me._Details_Size
		End Get
		Set
			If (String.Equals(Me._Details_Size, value) = false) Then
				Me.OnDetails_SizeChanging(value)
				Me.SendPropertyChanging
				Me._Details_Size = value
				Me.SendPropertyChanged("Details_Size")
				Me.OnDetails_SizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accuracy", DbType:="VarChar(60)")>  _
	Public Property Accuracy() As String
		Get
			Return Me._Accuracy
		End Get
		Set
			If (String.Equals(Me._Accuracy, value) = false) Then
				Me.OnAccuracyChanging(value)
				Me.SendPropertyChanging
				Me._Accuracy = value
				Me.SendPropertyChanged("Accuracy")
				Me.OnAccuracyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location_Assignee", DbType:="VarChar(60)")>  _
	Public Property Location_Assignee() As String
		Get
			Return Me._Location_Assignee
		End Get
		Set
			If (String.Equals(Me._Location_Assignee, value) = false) Then
				Me.OnLocation_AssigneeChanging(value)
				Me.SendPropertyChanging
				Me._Location_Assignee = value
				Me.SendPropertyChanged("Location_Assignee")
				Me.OnLocation_AssigneeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(60)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_Cycle", DbType:="VarChar(20)")>  _
	Public Property Cal_Cycle() As String
		Get
			Return Me._Cal_Cycle
		End Get
		Set
			If (String.Equals(Me._Cal_Cycle, value) = false) Then
				Me.OnCal_CycleChanging(value)
				Me.SendPropertyChanging
				Me._Cal_Cycle = value
				Me.SendPropertyChanged("Cal_Cycle")
				Me.OnCal_CycleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_Instructions", DbType:="VarChar(MAX)")>  _
	Public Property Cal_Instructions() As String
		Get
			Return Me._Cal_Instructions
		End Get
		Set
			If (String.Equals(Me._Cal_Instructions, value) = false) Then
				Me.OnCal_InstructionsChanging(value)
				Me.SendPropertyChanging
				Me._Cal_Instructions = value
				Me.SendPropertyChanged("Cal_Instructions")
				Me.OnCal_InstructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageNotes", DbType:="VarChar(MAX)")>  _
	Public Property GageNotes() As String
		Get
			Return Me._GageNotes
		End Get
		Set
			If (String.Equals(Me._GageNotes, value) = false) Then
				Me.OnGageNotesChanging(value)
				Me.SendPropertyChanging
				Me._GageNotes = value
				Me.SendPropertyChanged("GageNotes")
				Me.OnGageNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateDue", DbType:="Date")>  _
	Public Property DateDue() As System.Nullable(Of Date)
		Get
			Return Me._DateDue
		End Get
		Set
			If (Me._DateDue.Equals(value) = false) Then
				Me.OnDateDueChanging(value)
				Me.SendPropertyChanging
				Me._DateDue = value
				Me.SendPropertyChanged("DateDue")
				Me.OnDateDueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageType", DbType:="VarChar(20)")>  _
	Public Property GageType() As String
		Get
			Return Me._GageType
		End Get
		Set
			If (String.Equals(Me._GageType, value) = false) Then
				Me.OnGageTypeChanging(value)
				Me.SendPropertyChanging
				Me._GageType = value
				Me.SendPropertyChanged("GageType")
				Me.OnGageTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocEntityID", DbType:="Int")>  _
	Public Property LocEntityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocEntityID
		End Get
		Set
			If (Me._LocEntityID.Equals(value) = false) Then
				Me.OnLocEntityIDChanging(value)
				Me.SendPropertyChanging
				Me._LocEntityID = value
				Me.SendPropertyChanged("LocEntityID")
				Me.OnLocEntityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageValdID", DbType:="Int")>  _
	Public Property GageValdID() As System.Nullable(Of Integer)
		Get
			Return Me._GageValdID
		End Get
		Set
			If (Me._GageValdID.Equals(value) = false) Then
				Me.OnGageValdIDChanging(value)
				Me.SendPropertyChanging
				Me._GageValdID = value
				Me.SendPropertyChanged("GageValdID")
				Me.OnGageValdIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCBOLists")>  _
Partial Public Class tblCBOList
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDKey As Integer
	
	Private _cboID As Integer
	
	Private _SortOrd As Integer
	
	Private _ItemName As String
	
	Private _ListName As String
	
	Private _CanAdd As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDKeyChanged()
    End Sub
    Partial Private Sub OncboIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncboIDChanged()
    End Sub
    Partial Private Sub OnSortOrdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSortOrdChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnListNameChanging(value As String)
    End Sub
    Partial Private Sub OnListNameChanged()
    End Sub
    Partial Private Sub OnCanAddChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCanAddChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDKey", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDKey() As Integer
		Get
			Return Me._IDKey
		End Get
		Set
			If ((Me._IDKey = value)  _
						= false) Then
				Me.OnIDKeyChanging(value)
				Me.SendPropertyChanging
				Me._IDKey = value
				Me.SendPropertyChanged("IDKey")
				Me.OnIDKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cboID", DbType:="Int NOT NULL")>  _
	Public Property cboID() As Integer
		Get
			Return Me._cboID
		End Get
		Set
			If ((Me._cboID = value)  _
						= false) Then
				Me.OncboIDChanging(value)
				Me.SendPropertyChanging
				Me._cboID = value
				Me.SendPropertyChanged("cboID")
				Me.OncboIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrd", DbType:="Int NOT NULL")>  _
	Public Property SortOrd() As Integer
		Get
			Return Me._SortOrd
		End Get
		Set
			If ((Me._SortOrd = value)  _
						= false) Then
				Me.OnSortOrdChanging(value)
				Me.SendPropertyChanging
				Me._SortOrd = value
				Me.SendPropertyChanged("SortOrd")
				Me.OnSortOrdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="VarChar(50)")>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListName", DbType:="VarChar(50)")>  _
	Public Property ListName() As String
		Get
			Return Me._ListName
		End Get
		Set
			If (String.Equals(Me._ListName, value) = false) Then
				Me.OnListNameChanging(value)
				Me.SendPropertyChanging
				Me._ListName = value
				Me.SendPropertyChanged("ListName")
				Me.OnListNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanAdd", DbType:="Bit NOT NULL")>  _
	Public Property CanAdd() As Boolean
		Get
			Return Me._CanAdd
		End Get
		Set
			If ((Me._CanAdd = value)  _
						= false) Then
				Me.OnCanAddChanging(value)
				Me.SendPropertyChanging
				Me._CanAdd = value
				Me.SendPropertyChanged("CanAdd")
				Me.OnCanAddChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageValdCrit")>  _
Partial Public Class TblGageValdCrit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CritID As Integer
	
	Private _GageTypeDesc As String
	
	Private _CriteriaSet As String
	
	Private _CriteriaDesc As String
	
	Private _ScaleDesc As String
	
	Private _TargetValue As String
	
	Private _TolType As String
	
	Private _UpperLimit As String
	
	Private _LowerLimit As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCritIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCritIDChanged()
    End Sub
    Partial Private Sub OnGageTypeDescChanging(value As String)
    End Sub
    Partial Private Sub OnGageTypeDescChanged()
    End Sub
    Partial Private Sub OnCriteriaSetChanging(value As String)
    End Sub
    Partial Private Sub OnCriteriaSetChanged()
    End Sub
    Partial Private Sub OnCriteriaDescChanging(value As String)
    End Sub
    Partial Private Sub OnCriteriaDescChanged()
    End Sub
    Partial Private Sub OnScaleDescChanging(value As String)
    End Sub
    Partial Private Sub OnScaleDescChanged()
    End Sub
    Partial Private Sub OnTargetValueChanging(value As String)
    End Sub
    Partial Private Sub OnTargetValueChanged()
    End Sub
    Partial Private Sub OnTolTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTolTypeChanged()
    End Sub
    Partial Private Sub OnUpperLimitChanging(value As String)
    End Sub
    Partial Private Sub OnUpperLimitChanged()
    End Sub
    Partial Private Sub OnLowerLimitChanging(value As String)
    End Sub
    Partial Private Sub OnLowerLimitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CritID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CritID() As Integer
		Get
			Return Me._CritID
		End Get
		Set
			If ((Me._CritID = value)  _
						= false) Then
				Me.OnCritIDChanging(value)
				Me.SendPropertyChanging
				Me._CritID = value
				Me.SendPropertyChanged("CritID")
				Me.OnCritIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageTypeDesc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageTypeDesc() As String
		Get
			Return Me._GageTypeDesc
		End Get
		Set
			If (String.Equals(Me._GageTypeDesc, value) = false) Then
				Me.OnGageTypeDescChanging(value)
				Me.SendPropertyChanging
				Me._GageTypeDesc = value
				Me.SendPropertyChanged("GageTypeDesc")
				Me.OnGageTypeDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CriteriaSet", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CriteriaSet() As String
		Get
			Return Me._CriteriaSet
		End Get
		Set
			If (String.Equals(Me._CriteriaSet, value) = false) Then
				Me.OnCriteriaSetChanging(value)
				Me.SendPropertyChanging
				Me._CriteriaSet = value
				Me.SendPropertyChanged("CriteriaSet")
				Me.OnCriteriaSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CriteriaDesc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CriteriaDesc() As String
		Get
			Return Me._CriteriaDesc
		End Get
		Set
			If (String.Equals(Me._CriteriaDesc, value) = false) Then
				Me.OnCriteriaDescChanging(value)
				Me.SendPropertyChanging
				Me._CriteriaDesc = value
				Me.SendPropertyChanged("CriteriaDesc")
				Me.OnCriteriaDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScaleDesc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property ScaleDesc() As String
		Get
			Return Me._ScaleDesc
		End Get
		Set
			If (String.Equals(Me._ScaleDesc, value) = false) Then
				Me.OnScaleDescChanging(value)
				Me.SendPropertyChanging
				Me._ScaleDesc = value
				Me.SendPropertyChanged("ScaleDesc")
				Me.OnScaleDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TargetValue", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property TargetValue() As String
		Get
			Return Me._TargetValue
		End Get
		Set
			If (String.Equals(Me._TargetValue, value) = false) Then
				Me.OnTargetValueChanging(value)
				Me.SendPropertyChanging
				Me._TargetValue = value
				Me.SendPropertyChanged("TargetValue")
				Me.OnTargetValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TolType", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property TolType() As String
		Get
			Return Me._TolType
		End Get
		Set
			If (String.Equals(Me._TolType, value) = false) Then
				Me.OnTolTypeChanging(value)
				Me.SendPropertyChanging
				Me._TolType = value
				Me.SendPropertyChanged("TolType")
				Me.OnTolTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpperLimit", DbType:="VarChar(20)")>  _
	Public Property UpperLimit() As String
		Get
			Return Me._UpperLimit
		End Get
		Set
			If (String.Equals(Me._UpperLimit, value) = false) Then
				Me.OnUpperLimitChanging(value)
				Me.SendPropertyChanging
				Me._UpperLimit = value
				Me.SendPropertyChanged("UpperLimit")
				Me.OnUpperLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LowerLimit", DbType:="VarChar(20)")>  _
	Public Property LowerLimit() As String
		Get
			Return Me._LowerLimit
		End Get
		Set
			If (String.Equals(Me._LowerLimit, value) = false) Then
				Me.OnLowerLimitChanging(value)
				Me.SendPropertyChanging
				Me._LowerLimit = value
				Me.SendPropertyChanged("LowerLimit")
				Me.OnLowerLimitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageValdEvntRslts")>  _
Partial Public Class TblGageValdEvntRslt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ResultsKey As Integer
	
	Private _EventKey As Integer
	
	Private _CritID As Integer
	
	Private _MeasuredRslt As String
	
	Private _PassFail As Boolean
	
	Private _RsltsComment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResultsKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnResultsKeyChanged()
    End Sub
    Partial Private Sub OnEventKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventKeyChanged()
    End Sub
    Partial Private Sub OnCritIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCritIDChanged()
    End Sub
    Partial Private Sub OnMeasuredRsltChanging(value As String)
    End Sub
    Partial Private Sub OnMeasuredRsltChanged()
    End Sub
    Partial Private Sub OnPassFailChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPassFailChanged()
    End Sub
    Partial Private Sub OnRsltsCommentChanging(value As String)
    End Sub
    Partial Private Sub OnRsltsCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultsKey", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ResultsKey() As Integer
		Get
			Return Me._ResultsKey
		End Get
		Set
			If ((Me._ResultsKey = value)  _
						= false) Then
				Me.OnResultsKeyChanging(value)
				Me.SendPropertyChanging
				Me._ResultsKey = value
				Me.SendPropertyChanged("ResultsKey")
				Me.OnResultsKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventKey", DbType:="Int NOT NULL")>  _
	Public Property EventKey() As Integer
		Get
			Return Me._EventKey
		End Get
		Set
			If ((Me._EventKey = value)  _
						= false) Then
				Me.OnEventKeyChanging(value)
				Me.SendPropertyChanging
				Me._EventKey = value
				Me.SendPropertyChanged("EventKey")
				Me.OnEventKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CritID", DbType:="Int NOT NULL")>  _
	Public Property CritID() As Integer
		Get
			Return Me._CritID
		End Get
		Set
			If ((Me._CritID = value)  _
						= false) Then
				Me.OnCritIDChanging(value)
				Me.SendPropertyChanging
				Me._CritID = value
				Me.SendPropertyChanged("CritID")
				Me.OnCritIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MeasuredRslt", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property MeasuredRslt() As String
		Get
			Return Me._MeasuredRslt
		End Get
		Set
			If (String.Equals(Me._MeasuredRslt, value) = false) Then
				Me.OnMeasuredRsltChanging(value)
				Me.SendPropertyChanging
				Me._MeasuredRslt = value
				Me.SendPropertyChanged("MeasuredRslt")
				Me.OnMeasuredRsltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PassFail", DbType:="Bit NOT NULL")>  _
	Public Property PassFail() As Boolean
		Get
			Return Me._PassFail
		End Get
		Set
			If ((Me._PassFail = value)  _
						= false) Then
				Me.OnPassFailChanging(value)
				Me.SendPropertyChanging
				Me._PassFail = value
				Me.SendPropertyChanged("PassFail")
				Me.OnPassFailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RsltsComment", DbType:="VarChar(MAX)")>  _
	Public Property RsltsComment() As String
		Get
			Return Me._RsltsComment
		End Get
		Set
			If (String.Equals(Me._RsltsComment, value) = false) Then
				Me.OnRsltsCommentChanging(value)
				Me.SendPropertyChanging
				Me._RsltsComment = value
				Me.SendPropertyChanged("RsltsComment")
				Me.OnRsltsCommentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageValdXColHdr")>  _
Partial Public Class TblGageValdXColHdr
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _XColID As Integer
	
	Private _CriteriaSetDesc As String
	
	Private _ColName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnXColIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnXColIDChanged()
    End Sub
    Partial Private Sub OnCriteriaSetDescChanging(value As String)
    End Sub
    Partial Private Sub OnCriteriaSetDescChanged()
    End Sub
    Partial Private Sub OnColNameChanging(value As String)
    End Sub
    Partial Private Sub OnColNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XColID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property XColID() As Integer
		Get
			Return Me._XColID
		End Get
		Set
			If ((Me._XColID = value)  _
						= false) Then
				Me.OnXColIDChanging(value)
				Me.SendPropertyChanging
				Me._XColID = value
				Me.SendPropertyChanged("XColID")
				Me.OnXColIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CriteriaSetDesc", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CriteriaSetDesc() As String
		Get
			Return Me._CriteriaSetDesc
		End Get
		Set
			If (String.Equals(Me._CriteriaSetDesc, value) = false) Then
				Me.OnCriteriaSetDescChanging(value)
				Me.SendPropertyChanging
				Me._CriteriaSetDesc = value
				Me.SendPropertyChanged("CriteriaSetDesc")
				Me.OnCriteriaSetDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColName", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property ColName() As String
		Get
			Return Me._ColName
		End Get
		Set
			If (String.Equals(Me._ColName, value) = false) Then
				Me.OnColNameChanging(value)
				Me.SendPropertyChanging
				Me._ColName = value
				Me.SendPropertyChanged("ColName")
				Me.OnColNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageValdXColData")>  _
Partial Public Class TblGageValdXColData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DataKey As Integer
	
	Private _EventKey As Integer
	
	Private _CritID As Integer
	
	Private _XColID As Integer
	
	Private _ColData As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataKeyChanged()
    End Sub
    Partial Private Sub OnEventKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventKeyChanged()
    End Sub
    Partial Private Sub OnCritIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCritIDChanged()
    End Sub
    Partial Private Sub OnXColIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnXColIDChanged()
    End Sub
    Partial Private Sub OnColDataChanging(value As String)
    End Sub
    Partial Private Sub OnColDataChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataKey", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DataKey() As Integer
		Get
			Return Me._DataKey
		End Get
		Set
			If ((Me._DataKey = value)  _
						= false) Then
				Me.OnDataKeyChanging(value)
				Me.SendPropertyChanging
				Me._DataKey = value
				Me.SendPropertyChanged("DataKey")
				Me.OnDataKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventKey", DbType:="Int NOT NULL")>  _
	Public Property EventKey() As Integer
		Get
			Return Me._EventKey
		End Get
		Set
			If ((Me._EventKey = value)  _
						= false) Then
				Me.OnEventKeyChanging(value)
				Me.SendPropertyChanging
				Me._EventKey = value
				Me.SendPropertyChanged("EventKey")
				Me.OnEventKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CritID", DbType:="Int NOT NULL")>  _
	Public Property CritID() As Integer
		Get
			Return Me._CritID
		End Get
		Set
			If ((Me._CritID = value)  _
						= false) Then
				Me.OnCritIDChanging(value)
				Me.SendPropertyChanging
				Me._CritID = value
				Me.SendPropertyChanged("CritID")
				Me.OnCritIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XColID", DbType:="Int NOT NULL")>  _
	Public Property XColID() As Integer
		Get
			Return Me._XColID
		End Get
		Set
			If ((Me._XColID = value)  _
						= false) Then
				Me.OnXColIDChanging(value)
				Me.SendPropertyChanging
				Me._XColID = value
				Me.SendPropertyChanged("XColID")
				Me.OnXColIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColData", DbType:="VarChar(50)")>  _
	Public Property ColData() As String
		Get
			Return Me._ColData
		End Get
		Set
			If (String.Equals(Me._ColData, value) = false) Then
				Me.OnColDataChanging(value)
				Me.SendPropertyChanging
				Me._ColData = value
				Me.SendPropertyChanged("ColData")
				Me.OnColDataChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageValdGagesUsed")>  _
Partial Public Class TblGageValdGagesUsed
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GVGUKey As Integer
	
	Private _EventKey As Integer
	
	Private _GageID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGVGUKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnGVGUKeyChanged()
    End Sub
    Partial Private Sub OnEventKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventKeyChanged()
    End Sub
    Partial Private Sub OnGageIDChanging(value As String)
    End Sub
    Partial Private Sub OnGageIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GVGUKey", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GVGUKey() As Integer
		Get
			Return Me._GVGUKey
		End Get
		Set
			If ((Me._GVGUKey = value)  _
						= false) Then
				Me.OnGVGUKeyChanging(value)
				Me.SendPropertyChanging
				Me._GVGUKey = value
				Me.SendPropertyChanged("GVGUKey")
				Me.OnGVGUKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventKey", DbType:="Int NOT NULL")>  _
	Public Property EventKey() As Integer
		Get
			Return Me._EventKey
		End Get
		Set
			If ((Me._EventKey = value)  _
						= false) Then
				Me.OnEventKeyChanging(value)
				Me.SendPropertyChanging
				Me._EventKey = value
				Me.SendPropertyChanged("EventKey")
				Me.OnEventKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me.OnGageIDChanging(value)
				Me.SendPropertyChanging
				Me._GageID = value
				Me.SendPropertyChanged("GageID")
				Me.OnGageIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGageValdEvnts")>  _
Partial Public Class TblGageValdEvnt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventKey As Integer
	
	Private _GageID As String
	
	Private _GageValdDate As Date
	
	Private _EvntComments As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventKeyChanged()
    End Sub
    Partial Private Sub OnGageIDChanging(value As String)
    End Sub
    Partial Private Sub OnGageIDChanged()
    End Sub
    Partial Private Sub OnGageValdDateChanging(value As Date)
    End Sub
    Partial Private Sub OnGageValdDateChanged()
    End Sub
    Partial Private Sub OnEvntCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnEvntCommentsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventKey", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property EventKey() As Integer
		Get
			Return Me._EventKey
		End Get
		Set
			If ((Me._EventKey = value)  _
						= false) Then
				Me.OnEventKeyChanging(value)
				Me.SendPropertyChanging
				Me._EventKey = value
				Me.SendPropertyChanged("EventKey")
				Me.OnEventKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property GageID() As String
		Get
			Return Me._GageID
		End Get
		Set
			If (String.Equals(Me._GageID, value) = false) Then
				Me.OnGageIDChanging(value)
				Me.SendPropertyChanging
				Me._GageID = value
				Me.SendPropertyChanged("GageID")
				Me.OnGageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GageValdDate", DbType:="Date NOT NULL")>  _
	Public Property GageValdDate() As Date
		Get
			Return Me._GageValdDate
		End Get
		Set
			If ((Me._GageValdDate = value)  _
						= false) Then
				Me.OnGageValdDateChanging(value)
				Me.SendPropertyChanging
				Me._GageValdDate = value
				Me.SendPropertyChanged("GageValdDate")
				Me.OnGageValdDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EvntComments", DbType:="VarChar(MAX)")>  _
	Public Property EvntComments() As String
		Get
			Return Me._EvntComments
		End Get
		Set
			If (String.Equals(Me._EvntComments, value) = false) Then
				Me.OnEvntCommentsChanging(value)
				Me.SendPropertyChanging
				Me._EvntComments = value
				Me.SendPropertyChanged("EvntComments")
				Me.OnEvntCommentsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
